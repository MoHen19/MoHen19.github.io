{"meta":{"title":"墨痕","subtitle":"mohen","description":"感谢开源,感谢各位前辈大佬指引.","author":"墨痕","url":"http://mohen19.gitee.io/mohen19","root":"/"},"pages":[{"title":"","date":"2020-04-08T20:04:41.724Z","updated":"2020-04-08T20:04:41.716Z","comments":true,"path":"404.html","permalink":"http://mohen19.gitee.io/mohen19/404.html","excerpt":"","text":"title: 404date:type: “404”layout: “404”description: “Oops~,飞走了!找不到你想要的页面:” document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2020-04-08T14:24:24.000Z","updated":"2020-04-08T14:25:12.029Z","comments":true,"path":"about/index.html","permalink":"http://mohen19.gitee.io/mohen19/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2020-04-08T14:22:31.000Z","updated":"2020-04-08T14:23:38.573Z","comments":true,"path":"tags/index.html","permalink":"http://mohen19.gitee.io/mohen19/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2020-04-08T14:27:14.000Z","updated":"2020-04-08T14:27:54.864Z","comments":true,"path":"friends/index.html","permalink":"http://mohen19.gitee.io/mohen19/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2020-04-08T14:19:32.000Z","updated":"2020-04-08T14:21:35.653Z","comments":true,"path":"categories/index.html","permalink":"http://mohen19.gitee.io/mohen19/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"contact","date":"2020-04-08T14:25:56.000Z","updated":"2020-04-08T14:26:40.707Z","comments":true,"path":"contact/index.html","permalink":"http://mohen19.gitee.io/mohen19/contact/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"比较器","slug":"比较器","date":"2020-04-11T10:40:12.113Z","updated":"2020-04-11T10:40:12.113Z","comments":true,"path":"2020/04/11/bi-jiao-qi/","link":"","permalink":"http://mohen19.gitee.io/mohen19/2020/04/11/bi-jiao-qi/","excerpt":"","text":"Java中常见的比较器的实现方法在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。 通常对象之间的比较可以从两个方面去看： 第一个方面：对象的地址是否一样，也就是是否引用自同一个对象。这种方式可以直接使用“==“来完成。 第二个方面：以对象的某一个属性的角度去比较。 对于JDK8而言，有三种实现对象比较的方法： 1、覆写Object类的equals（）方法； 2、继承Comparable接口，并实现compareTo（）方法； 3、定义一个单独的对象比较器，继承自Comparator接口，实现compare（）方法。 由于使用的排序方式的不同，具体选择哪种方法来实现对象的比较也会有所不同。 第一种方法比较便于理解，复写equals()方法一般用于自己实现的对象数组排序，而对于在应用Java内置的排序算法时，使用后两种方式都是可以实现的。 先来看一下第二种方式，这种方式就是让自己编写的类继承Comparable接口，并实现接口的compareTo()方法，这种情况下，在使用java.util.Arrays.sort()方法时不用指定具体的比较器，sort()方法会使用对象自己的比较函数对对象进行排序。具体实例代码如下： import java.util.Arrays; class BookCook implements Comparable&lt;BookCook>{ private String title; private double price; public BookCook(String title,double price){ this.title = title; this.price = price; } @Override public String toString() { return \"书名：\"+this.title+\",价格：\"+this.price; } @Override public int compareTo(BookCook o) { if(this.price > o.price){ return 1; }else if(this.price &lt; o.price){ return -1; }else{ return 0; } } } 从JDK1.8开始出现了Comparator接口，它的出现解决了当需要在已经开发好的代码基础上完善对象的比较功能时不想更改之前的代码的问题。这种情况，我们需要单独定义一个对象比较器，继承Comparator接口。具体实现代码如下： class Student { private String name; private double score; public Student(String name,double score){ this.name = name; this.score = score; } public double getScore(){ return this.score; } @Override public String toString() { return \"姓名:\"+this.name+\",分数:\"+this.score; } } class StudentComparator implements Comparator&lt;Student> { @Override public int compare(Student o1,Student o2) { if(o1.getScore() > o2.getScore()){ return 1; }else if(o1.getScore() &lt; o2.getScore()){ return -1; }else{ return 0; } } } public class TestComparator { public static void main(String[] args) { Student[] sts = new Student[]{ new Student(\"小戴\",60), new Student(\"小王\",90), new Student(\"老王\",80), new Student(\"小萱\",95) }; java.util.Arrays.sort(sts, new StudentComparator()); System.out.println(java.util.Arrays.toString(sts)); } } document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-04-08T12:37:54.769Z","updated":"2020-04-08T12:37:54.769Z","comments":true,"path":"2020/04/08/hello-world/","link":"","permalink":"http://mohen19.gitee.io/mohen19/2020/04/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}],"categories":[],"tags":[]}